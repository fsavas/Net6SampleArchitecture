// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PumpService.Data;

#nullable disable

namespace PumpService.Data.Migrations
{
    [DbContext(typeof(BaseObjectContext))]
    partial class BaseObjectContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("PumpService.Core.Domain.BackgroundJobs.TaskSchedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EntryDelay")
                        .HasColumnType("int");

                    b.Property<int>("EntryPeriod")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRunning")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsStopOnError")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastEndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastStartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("NextRunOnFailure")
                        .HasColumnType("int");

                    b.Property<int>("NextRunOnSuccess")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Code");

                    b.ToTable("TaskSchedule", (string)null);
                });

            modelBuilder.Entity("PumpService.Core.Domain.Devices.Device", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("DeviceTypeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<long?>("ParentDeviceId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name", "DeviceTypeId");

                    b.HasIndex("DeviceTypeId");

                    b.HasIndex("ParentDeviceId");

                    b.ToTable("Device", (string)null);
                });

            modelBuilder.Entity("PumpService.Core.Domain.Devices.DeviceParameter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("DeviceId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("NameId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasAlternateKey("NameId", "DeviceId");

                    b.HasIndex("DeviceId");

                    b.HasIndex("TypeId");

                    b.ToTable("DeviceParameter", (string)null);
                });

            modelBuilder.Entity("PumpService.Core.Domain.Devices.DeviceType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasAlternateKey("TypeId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("DeviceType", (string)null);
                });

            modelBuilder.Entity("PumpService.Core.Domain.Localizations.Language", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Culture")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name", "Culture");

                    b.ToTable("Language", (string)null);
                });

            modelBuilder.Entity("PumpService.Core.Domain.Localizations.LocaleResource", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("LocaleResource", (string)null);
                });

            modelBuilder.Entity("PumpService.Core.Domain.Logs.Audit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("AuditDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("AuditTypeId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<long?>("AuditUserId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("ChangedColumns")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("KeyValues")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NewValues")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OldValues")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AuditTypeId");

                    b.HasIndex("AuditUserId");

                    b.ToTable("Audit", (string)null);
                });

            modelBuilder.Entity("PumpService.Core.Domain.Logs.Log", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Exception")
                        .HasColumnType("longtext");

                    b.Property<string>("LogEvent")
                        .HasColumnType("longtext");

                    b.Property<int?>("LogKey")
                        .HasColumnType("int");

                    b.Property<string>("LogLevel")
                        .HasColumnType("longtext");

                    b.Property<string>("Message")
                        .HasColumnType("longtext");

                    b.Property<string>("MessageTemplate")
                        .HasColumnType("longtext");

                    b.Property<string>("Properties")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("User")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Log", (string)null);
                });

            modelBuilder.Entity("PumpService.Core.Domain.Lookups.LookupTable", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LookupType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasAlternateKey("LookupType", "Name");

                    b.ToTable("LookupTable", (string)null);
                });

            modelBuilder.Entity("PumpService.Core.Domain.Products.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<long>("ProductGroupId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Code");

                    b.HasIndex("ProductGroupId");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("PumpService.Core.Domain.Products.ProductGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Code");

                    b.ToTable("ProductGroup", (string)null);
                });

            modelBuilder.Entity("PumpService.Core.Domain.Pumps.FillingPoint", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("Address")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Address");

                    b.HasAlternateKey("Code");

                    b.ToTable("FillingPoint", (string)null);
                });

            modelBuilder.Entity("PumpService.Core.Domain.Pumps.Nozzle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("Address")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("FillingPointId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Address", "FillingPointId");

                    b.HasIndex("FillingPointId");

                    b.HasIndex("ProductId");

                    b.ToTable("Nozzle", (string)null);
                });

            modelBuilder.Entity("PumpService.Core.Domain.Pumps.PumpSales", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("FillingPointId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("NetQuantity")
                        .HasColumnType("decimal(65,30)");

                    b.Property<long>("NozzleId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("PumpQuantity")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime?>("TransactionEndTime")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("TransactionStartTime")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("FillingPointId");

                    b.HasIndex("NozzleId");

                    b.HasIndex("ProductId");

                    b.ToTable("PumpSales", (string)null);
                });

            modelBuilder.Entity("PumpService.Core.Domain.Security.Permission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<long?>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Code");

                    b.HasIndex("RoleId");

                    b.ToTable("Permission", (string)null);
                });

            modelBuilder.Entity("PumpService.Core.Domain.Security.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Code");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("PumpService.Core.Domain.Security.RolePermissionMapping", b =>
                {
                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("PermissionId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissionMapping", (string)null);
                });

            modelBuilder.Entity("PumpService.Core.Domain.Stations.Personnel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CardId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal?>("DiscountRate")
                        .HasColumnType("decimal(65,30)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NationalIdNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PersonnelIdNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<long>("PositionTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasAlternateKey("CardId");

                    b.HasAlternateKey("NationalIdNumber");

                    b.HasAlternateKey("PersonnelIdNumber");

                    b.HasIndex("PositionTypeId");

                    b.ToTable("Personnel", (string)null);
                });

            modelBuilder.Entity("PumpService.Core.Domain.Stations.SerialPortDefinition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("BaudRate")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DataBits")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Parity")
                        .HasColumnType("int");

                    b.Property<string>("PortName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<long>("PortTypeId")
                        .HasColumnType("bigint");

                    b.Property<int>("ReadTimeout")
                        .HasColumnType("int");

                    b.Property<int>("StopBits")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("WriteTimeout")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasAlternateKey("PortName");

                    b.HasIndex("PortTypeId");

                    b.ToTable("SerialPortDefinition", (string)null);
                });

            modelBuilder.Entity("PumpService.Core.Domain.Stations.Station", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Station", (string)null);
                });

            modelBuilder.Entity("PumpService.Core.Domain.Tanks.Tank", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("AutoFillingNotRisingConstant")
                        .HasColumnType("int");

                    b.Property<decimal>("Capacity")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Diameter")
                        .HasColumnType("int");

                    b.Property<decimal?>("FuelOffset")
                        .HasColumnType("decimal(65,30)");

                    b.Property<bool>("GruptakiAktifTank")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal?>("HeightLimitBetweenTwoTankStatus")
                        .HasColumnType("decimal(65,30)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDetectAutoFilling")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal?>("LowFuelAlarm")
                        .IsRequired()
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("MeasurementPeriod")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("ProbeAddress")
                        .HasColumnType("int");

                    b.Property<short?>("ProbeAddressAsis")
                        .HasColumnType("smallint");

                    b.Property<int?>("ProbeLength")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("ProbeSerialNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("ProbeSerialNumberApplied")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("ProbeTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long>("SerialPortDefinitionId")
                        .HasColumnType("bigint");

                    b.Property<string>("TankGroupNo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal?>("WaterOffset")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Code");

                    b.HasAlternateKey("SerialPortDefinitionId");

                    b.HasIndex("ProbeTypeId");

                    b.HasIndex("ProductId");

                    b.ToTable("Tank", (string)null);
                });

            modelBuilder.Entity("PumpService.Core.Domain.Tanks.TankFilling", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FillingStartTime")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("TankFilling", (string)null);
                });

            modelBuilder.Entity("PumpService.Core.Domain.Tanks.TankStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("FuelLevelLength")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("FuelLevelVolume")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("FuelLevel_LTNet")
                        .IsRequired()
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("FuelLevel_LT_Kalibrasyon")
                        .HasColumnType("decimal(65,30)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("OlcumSebebiId")
                        .HasColumnType("bigint");

                    b.Property<long>("PompaSatisId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("SatisMiktari")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("StatusInfoDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("TankDolumId")
                        .HasColumnType("bigint");

                    b.Property<long>("TankId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("Temperature")
                        .IsRequired()
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("WaterLevelLength")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("WaterLevelVolume")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("OlcumSebebiId");

                    b.HasIndex("PompaSatisId");

                    b.HasIndex("TankDolumId");

                    b.HasIndex("TankId");

                    b.ToTable("TankStatus", (string)null);
                });

            modelBuilder.Entity("PumpService.Core.Domain.Users.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<byte[]>("Key")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Username");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("PumpService.Core.Domain.Users.UserRoleMapping", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoleMapping", (string)null);
                });

            modelBuilder.Entity("PumpService.Core.Domain.Devices.Device", b =>
                {
                    b.HasOne("PumpService.Core.Domain.Devices.DeviceType", "DeviceType")
                        .WithMany()
                        .HasForeignKey("DeviceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PumpService.Core.Domain.Devices.Device", "ParentDevice")
                        .WithMany()
                        .HasForeignKey("ParentDeviceId");

                    b.Navigation("DeviceType");

                    b.Navigation("ParentDevice");
                });

            modelBuilder.Entity("PumpService.Core.Domain.Devices.DeviceParameter", b =>
                {
                    b.HasOne("PumpService.Core.Domain.Devices.Device", "Device")
                        .WithMany("DeviceParameters")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PumpService.Core.Domain.Lookups.LookupTable", "Name")
                        .WithMany()
                        .HasForeignKey("NameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PumpService.Core.Domain.Lookups.LookupTable", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("Name");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("PumpService.Core.Domain.Devices.DeviceType", b =>
                {
                    b.HasOne("PumpService.Core.Domain.Lookups.LookupTable", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PumpService.Core.Domain.Lookups.LookupTable", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("PumpService.Core.Domain.Localizations.LocaleResource", b =>
                {
                    b.HasOne("PumpService.Core.Domain.Localizations.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("PumpService.Core.Domain.Logs.Audit", b =>
                {
                    b.HasOne("PumpService.Core.Domain.Lookups.LookupTable", "AuditType")
                        .WithMany()
                        .HasForeignKey("AuditTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PumpService.Core.Domain.Users.User", "AuditUser")
                        .WithMany()
                        .HasForeignKey("AuditUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AuditType");

                    b.Navigation("AuditUser");
                });

            modelBuilder.Entity("PumpService.Core.Domain.Products.Product", b =>
                {
                    b.HasOne("PumpService.Core.Domain.Products.ProductGroup", "ProductGroup")
                        .WithMany()
                        .HasForeignKey("ProductGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductGroup");
                });

            modelBuilder.Entity("PumpService.Core.Domain.Pumps.Nozzle", b =>
                {
                    b.HasOne("PumpService.Core.Domain.Pumps.FillingPoint", "FillingPoint")
                        .WithMany("Nozzles")
                        .HasForeignKey("FillingPointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PumpService.Core.Domain.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FillingPoint");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PumpService.Core.Domain.Pumps.PumpSales", b =>
                {
                    b.HasOne("PumpService.Core.Domain.Pumps.FillingPoint", "FillingPoint")
                        .WithMany()
                        .HasForeignKey("FillingPointId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PumpService.Core.Domain.Pumps.Nozzle", "Nozzle")
                        .WithMany()
                        .HasForeignKey("NozzleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PumpService.Core.Domain.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FillingPoint");

                    b.Navigation("Nozzle");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PumpService.Core.Domain.Security.Permission", b =>
                {
                    b.HasOne("PumpService.Core.Domain.Security.Role", null)
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("PumpService.Core.Domain.Security.RolePermissionMapping", b =>
                {
                    b.HasOne("PumpService.Core.Domain.Security.Permission", "Permission")
                        .WithMany("RolePermissionMappings")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PumpService.Core.Domain.Security.Role", "Role")
                        .WithMany("RolePermissionMappings")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("PumpService.Core.Domain.Stations.Personnel", b =>
                {
                    b.HasOne("PumpService.Core.Domain.Lookups.LookupTable", "PositionType")
                        .WithMany()
                        .HasForeignKey("PositionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PositionType");
                });

            modelBuilder.Entity("PumpService.Core.Domain.Stations.SerialPortDefinition", b =>
                {
                    b.HasOne("PumpService.Core.Domain.Lookups.LookupTable", "PortType")
                        .WithMany()
                        .HasForeignKey("PortTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PortType");
                });

            modelBuilder.Entity("PumpService.Core.Domain.Tanks.Tank", b =>
                {
                    b.HasOne("PumpService.Core.Domain.Lookups.LookupTable", "ProbeType")
                        .WithMany()
                        .HasForeignKey("ProbeTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PumpService.Core.Domain.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PumpService.Core.Domain.Stations.SerialPortDefinition", "SerialPortDefinition")
                        .WithMany()
                        .HasForeignKey("SerialPortDefinitionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProbeType");

                    b.Navigation("Product");

                    b.Navigation("SerialPortDefinition");
                });

            modelBuilder.Entity("PumpService.Core.Domain.Tanks.TankStatus", b =>
                {
                    b.HasOne("PumpService.Core.Domain.Lookups.LookupTable", "OlcumSebebi")
                        .WithMany()
                        .HasForeignKey("OlcumSebebiId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PumpService.Core.Domain.Pumps.PumpSales", "PompaSatis")
                        .WithMany()
                        .HasForeignKey("PompaSatisId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PumpService.Core.Domain.Tanks.TankFilling", "TankDolum")
                        .WithMany()
                        .HasForeignKey("TankDolumId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PumpService.Core.Domain.Tanks.Tank", "Tank")
                        .WithMany()
                        .HasForeignKey("TankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OlcumSebebi");

                    b.Navigation("PompaSatis");

                    b.Navigation("Tank");

                    b.Navigation("TankDolum");
                });

            modelBuilder.Entity("PumpService.Core.Domain.Users.UserRoleMapping", b =>
                {
                    b.HasOne("PumpService.Core.Domain.Security.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PumpService.Core.Domain.Users.User", "User")
                        .WithMany("UserRoleMappings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PumpService.Core.Domain.Devices.Device", b =>
                {
                    b.Navigation("DeviceParameters");
                });

            modelBuilder.Entity("PumpService.Core.Domain.Pumps.FillingPoint", b =>
                {
                    b.Navigation("Nozzles");
                });

            modelBuilder.Entity("PumpService.Core.Domain.Security.Permission", b =>
                {
                    b.Navigation("RolePermissionMappings");
                });

            modelBuilder.Entity("PumpService.Core.Domain.Security.Role", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("RolePermissionMappings");
                });

            modelBuilder.Entity("PumpService.Core.Domain.Users.User", b =>
                {
                    b.Navigation("UserRoleMappings");
                });
#pragma warning restore 612, 618
        }
    }
}
